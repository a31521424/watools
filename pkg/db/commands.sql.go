// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: commands.sql

package db

import (
	"context"
	"database/sql"
)

const createCommand = `-- name: CreateCommand :one
INSERT INTO commands (id, name, description, category, path, icon_path, dir_updated_at)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
RETURNING id, name, description, category, path, icon_path, updated_at, dir_updated_at
`

type CreateCommandParams struct {
	ID           string
	Name         string
	Description  string
	Category     string
	Path         string
	IconPath     string
	DirUpdatedAt string
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, createCommand,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Path,
		arg.IconPath,
		arg.DirUpdatedAt,
	)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Path,
		&i.IconPath,
		&i.UpdatedAt,
		&i.DirUpdatedAt,
	)
	return i, err
}

const deleteCommand = `-- name: DeleteCommand :exec
DELETE
FROM commands
WHERE id = ?1
`

func (q *Queries) DeleteCommand(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCommand, id)
	return err
}

const getCommandIsUpdatedDir = `-- name: GetCommandIsUpdatedDir :one
SELECT id, name, description, category, path, icon_path, updated_at, dir_updated_at
FROM commands
WHERE dir_updated_at != ?1
  AND path = ?2
LIMIT 1
`

type GetCommandIsUpdatedDirParams struct {
	DirUpdatedAt string
	Path         string
}

func (q *Queries) GetCommandIsUpdatedDir(ctx context.Context, arg GetCommandIsUpdatedDirParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommandIsUpdatedDir, arg.DirUpdatedAt, arg.Path)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Path,
		&i.IconPath,
		&i.UpdatedAt,
		&i.DirUpdatedAt,
	)
	return i, err
}

const getCommands = `-- name: GetCommands :many
SELECT id, name, description, category, path, icon_path, updated_at, dir_updated_at
FROM commands
`

func (q *Queries) GetCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, getCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Path,
			&i.IconPath,
			&i.UpdatedAt,
			&i.DirUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredCommands = `-- name: GetExpiredCommands :many
SELECT id, name, description, category, path, icon_path, updated_at, dir_updated_at
FROM commands
WHERE updated_at < ?1
`

func (q *Queries) GetExpiredCommands(ctx context.Context, updatedAt string) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredCommands, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Path,
			&i.IconPath,
			&i.UpdatedAt,
			&i.DirUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommandPartial = `-- name: UpdateCommandPartial :exec
UPDATE commands
SET name           = COALESCE(?1, name),
    description    = COALESCE(?2, description),
    category       = COALESCE(?3, category),
    path           = COALESCE(?4, path),
    icon_path      = COALESCE(?5, icon_path),
    dir_updated_at = COALESCE(?6, dir_updated_at),
    updated_at     = datetime('now', 'localtime')
WHERE id = ?7
`

type UpdateCommandPartialParams struct {
	Name         sql.NullString
	Description  sql.NullString
	Category     sql.NullString
	Path         sql.NullString
	IconPath     sql.NullString
	DirUpdatedAt sql.NullString
	ID           string
}

func (q *Queries) UpdateCommandPartial(ctx context.Context, arg UpdateCommandPartialParams) error {
	_, err := q.db.ExecContext(ctx, updateCommandPartial,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Path,
		arg.IconPath,
		arg.DirUpdatedAt,
		arg.ID,
	)
	return err
}
