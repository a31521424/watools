// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createCommand = `-- name: CreateCommand :one
INSERT INTO commands (name, description, category, path, icon_path)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, description, category, path, icon_path, created_at, updated_at, is_deleted
`

type CreateCommandParams struct {
	Name        string
	Description string
	Category    string
	Path        string
	IconPath    string
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, createCommand,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Path,
		arg.IconPath,
	)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Path,
		&i.IconPath,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const deleteCommand = `-- name: DeleteCommand :exec
DELETE
FROM commands
WHERE id = ?
`

func (q *Queries) DeleteCommand(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommand, id)
	return err
}

const findCommandByPath = `-- name: FindCommandByPath :one
SELECT id, name, description, category, path, icon_path, created_at, updated_at, is_deleted
FROM commands
WHERE path = ?
`

func (q *Queries) FindCommandByPath(ctx context.Context, path string) (Command, error) {
	row := q.db.QueryRowContext(ctx, findCommandByPath, path)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Path,
		&i.IconPath,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const findExpiredCommands = `-- name: FindExpiredCommands :many
SELECT id, name, description, category, path, icon_path, created_at, updated_at, is_deleted
FROM commands
WHERE updated_at < ?
  AND is_deleted = 0
`

func (q *Queries) FindExpiredCommands(ctx context.Context, updatedAt string) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, findExpiredCommands, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Path,
			&i.IconPath,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommand = `-- name: GetCommand :one
SELECT id, name, description, category, path, icon_path, created_at, updated_at, is_deleted
FROM commands
WHERE id = ?
`

func (q *Queries) GetCommand(ctx context.Context, id int64) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommand, id)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Path,
		&i.IconPath,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getCommands = `-- name: GetCommands :many
SELECT id, name, description, category, path, icon_path, created_at, updated_at, is_deleted
FROM commands
`

func (q *Queries) GetCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, getCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Path,
			&i.IconPath,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommandPartial = `-- name: UpdateCommandPartial :exec
Update commands
SET name        = COALESCE(?1, name),
    description = COALESCE(?2, description),
    category    = COALESCE(?3, category),
    path        = COALESCE(?4, path),
    icon_path   = COALESCE(?5, icon_path),
    is_deleted  = COALESCE(?6, is_deleted),
    updated_at  = datetime('now', 'localtime')
WHERE id = ?7
`

type UpdateCommandPartialParams struct {
	Name        sql.NullString
	Description sql.NullString
	Category    sql.NullString
	Path        sql.NullString
	IconPath    sql.NullString
	IsDeleted   sql.NullBool
	ID          int64
}

func (q *Queries) UpdateCommandPartial(ctx context.Context, arg UpdateCommandPartialParams) error {
	_, err := q.db.ExecContext(ctx, updateCommandPartial,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Path,
		arg.IconPath,
		arg.IsDeleted,
		arg.ID,
	)
	return err
}
