// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: applications.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO application (id, name, description, category, path, icon_path, dir_updated_at)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
RETURNING id, name, description, category, path, icon_path, updated_at, dir_updated_at
`

type CreateApplicationParams struct {
	ID           string
	Name         string
	Description  string
	Category     string
	Path         string
	IconPath     string
	DirUpdatedAt string
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Path,
		arg.IconPath,
		arg.DirUpdatedAt,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Path,
		&i.IconPath,
		&i.UpdatedAt,
		&i.DirUpdatedAt,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE
FROM application
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteApplication(ctx context.Context, ids []string) error {
	query := deleteApplication
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getApplicationIsUpdatedDir = `-- name: GetApplicationIsUpdatedDir :one
SELECT id, name, description, category, path, icon_path, updated_at, dir_updated_at
FROM application
WHERE dir_updated_at != ?1
  AND path = ?2
LIMIT 1
`

type GetApplicationIsUpdatedDirParams struct {
	DirUpdatedAt string
	Path         string
}

func (q *Queries) GetApplicationIsUpdatedDir(ctx context.Context, arg GetApplicationIsUpdatedDirParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, getApplicationIsUpdatedDir, arg.DirUpdatedAt, arg.Path)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Path,
		&i.IconPath,
		&i.UpdatedAt,
		&i.DirUpdatedAt,
	)
	return i, err
}

const getApplications = `-- name: GetApplications :many
SELECT id, name, description, category, path, icon_path, updated_at, dir_updated_at
FROM application
`

func (q *Queries) GetApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, getApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Path,
			&i.IconPath,
			&i.UpdatedAt,
			&i.DirUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredApplications = `-- name: GetExpiredApplications :many
SELECT id, name, description, category, path, icon_path, updated_at, dir_updated_at
FROM application
WHERE updated_at < ?1
`

func (q *Queries) GetExpiredApplications(ctx context.Context, updatedAt string) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredApplications, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Path,
			&i.IconPath,
			&i.UpdatedAt,
			&i.DirUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplicationPartial = `-- name: UpdateApplicationPartial :exec
UPDATE application
SET name           = COALESCE(?1, name),
    description    = COALESCE(?2, description),
    category       = COALESCE(?3, category),
    path           = COALESCE(?4, path),
    icon_path      = COALESCE(?5, icon_path),
    dir_updated_at = COALESCE(?6, dir_updated_at),
    updated_at     = datetime('now', 'localtime')
WHERE id = ?7
`

type UpdateApplicationPartialParams struct {
	Name         sql.NullString
	Description  sql.NullString
	Category     sql.NullString
	Path         sql.NullString
	IconPath     sql.NullString
	DirUpdatedAt sql.NullString
	ID           string
}

func (q *Queries) UpdateApplicationPartial(ctx context.Context, arg UpdateApplicationPartialParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicationPartial,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Path,
		arg.IconPath,
		arg.DirUpdatedAt,
		arg.ID,
	)
	return err
}
