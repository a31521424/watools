// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plugins.sql

package db

import (
	"context"
	"database/sql"
)

const createPlugin = `-- name: CreatePlugin :one
INSERT INTO plugins (id, package_id, name, version, description)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id, package_id, name, version, description
`

type CreatePluginParams struct {
	ID          string
	PackageID   string
	Name        string
	Version     string
	Description sql.NullString
}

func (q *Queries) CreatePlugin(ctx context.Context, arg CreatePluginParams) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, createPlugin,
		arg.ID,
		arg.PackageID,
		arg.Name,
		arg.Version,
		arg.Description,
	)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.PackageID,
		&i.Name,
		&i.Version,
		&i.Description,
	)
	return i, err
}

const deletePlugin = `-- name: DeletePlugin :exec
DELETE
FROM plugins
WHERE id = ?1
`

func (q *Queries) DeletePlugin(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePlugin, id)
	return err
}

const getPlugin = `-- name: GetPlugin :one
SELECT id, package_id, name, version, description
FROM plugins
WHERE id = ?1
`

func (q *Queries) GetPlugin(ctx context.Context, id string) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, getPlugin, id)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.PackageID,
		&i.Name,
		&i.Version,
		&i.Description,
	)
	return i, err
}

const getPlugins = `-- name: GetPlugins :many
SELECT id, package_id, name, version, description
FROM plugins
`

func (q *Queries) GetPlugins(ctx context.Context) ([]Plugin, error) {
	rows, err := q.db.QueryContext(ctx, getPlugins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plugin
	for rows.Next() {
		var i Plugin
		if err := rows.Scan(
			&i.ID,
			&i.PackageID,
			&i.Name,
			&i.Version,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
