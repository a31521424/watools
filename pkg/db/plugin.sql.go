// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: plugin.sql

package db

import (
	"context"

	"watools/pkg/models"
)

const getPlugins = `-- name: GetPlugins :many
SELECT package_id, enabled, storage, last_used_at, used_count
FROM plugin_state
`

func (q *Queries) GetPlugins(ctx context.Context) ([]PluginState, error) {
	rows, err := q.db.QueryContext(ctx, getPlugins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PluginState
	for rows.Next() {
		var i PluginState
		if err := rows.Scan(
			&i.PackageID,
			&i.Enabled,
			&i.Storage,
			&i.LastUsedAt,
			&i.UsedCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePluginUsage = `-- name: UpdatePluginUsage :exec
UPDATE plugin_state
SET last_used_at = ?, used_count = ?
WHERE package_id = ?
`

type UpdatePluginUsageParams struct {
	LastUsedAt models.OptionTime
	UsedCount  int64
	PackageID  string
}

func (q *Queries) UpdatePluginUsage(ctx context.Context, arg UpdatePluginUsageParams) error {
	_, err := q.db.ExecContext(ctx, updatePluginUsage, arg.LastUsedAt, arg.UsedCount, arg.PackageID)
	return err
}
